<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="159" failures="0" errors="0" time="0.978">
  <testsuite name="Health Management Integration Tests" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.115" tests="6">
    <testcase classname="Health Management Integration Tests Complete Health Management Flow should complete full workflow: prescription -&gt; appointment -&gt; provider lookup" name="Health Management Integration Tests Complete Health Management Flow should complete full workflow: prescription -&gt; appointment -&gt; provider lookup" time="0.002">
    </testcase>
    <testcase classname="Health Management Integration Tests Complete Health Management Flow should retrieve all user health data after workflow" name="Health Management Integration Tests Complete Health Management Flow should retrieve all user health data after workflow" time="0">
    </testcase>
    <testcase classname="Health Management Integration Tests Error Handling in Workflow should handle authentication failure at any step" name="Health Management Integration Tests Error Handling in Workflow should handle authentication failure at any step" time="0.001">
    </testcase>
    <testcase classname="Health Management Integration Tests Error Handling in Workflow should handle missing required fields in prescription creation" name="Health Management Integration Tests Error Handling in Workflow should handle missing required fields in prescription creation" time="0">
    </testcase>
    <testcase classname="Health Management Integration Tests Error Handling in Workflow should handle missing required fields in appointment scheduling" name="Health Management Integration Tests Error Handling in Workflow should handle missing required fields in appointment scheduling" time="0">
    </testcase>
    <testcase classname="Health Management Integration Tests Data Consistency should maintain referential integrity between prescription and appointment" name="Health Management Integration Tests Data Consistency should maintain referential integrity between prescription and appointment" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Button Component" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.118" tests="18">
    <testcase classname="Button Component Rendering should render button with text" name="Button Component Rendering should render button with text" time="0.013">
    </testcase>
    <testcase classname="Button Component Rendering should render button with default variant" name="Button Component Rendering should render button with default variant" time="0.001">
    </testcase>
    <testcase classname="Button Component Rendering should apply custom className" name="Button Component Rendering should apply custom className" time="0">
    </testcase>
    <testcase classname="Button Component Variants should render with default variant" name="Button Component Variants should render with default variant" time="0.001">
    </testcase>
    <testcase classname="Button Component Variants should render with outline variant" name="Button Component Variants should render with outline variant" time="0.001">
    </testcase>
    <testcase classname="Button Component Variants should render with ghost variant" name="Button Component Variants should render with ghost variant" time="0.001">
    </testcase>
    <testcase classname="Button Component Variants should render with destructive variant" name="Button Component Variants should render with destructive variant" time="0">
    </testcase>
    <testcase classname="Button Component Sizes should render with default size" name="Button Component Sizes should render with default size" time="0.001">
    </testcase>
    <testcase classname="Button Component Sizes should render with sm size" name="Button Component Sizes should render with sm size" time="0">
    </testcase>
    <testcase classname="Button Component Sizes should render with lg size" name="Button Component Sizes should render with lg size" time="0">
    </testcase>
    <testcase classname="Button Component Sizes should render with icon size" name="Button Component Sizes should render with icon size" time="0.001">
    </testcase>
    <testcase classname="Button Component Interactions should call onClick handler when clicked" name="Button Component Interactions should call onClick handler when clicked" time="0.001">
    </testcase>
    <testcase classname="Button Component Interactions should not call onClick when disabled" name="Button Component Interactions should not call onClick when disabled" time="0">
    </testcase>
    <testcase classname="Button Component Interactions should have disabled attribute when disabled prop is true" name="Button Component Interactions should have disabled attribute when disabled prop is true" time="0.001">
    </testcase>
    <testcase classname="Button Component Children Content should render with icon and text" name="Button Component Children Content should render with icon and text" time="0">
    </testcase>
    <testcase classname="Button Component Children Content should render with only icon" name="Button Component Children Content should render with only icon" time="0.001">
    </testcase>
    <testcase classname="Button Component Accessibility should be keyboard accessible" name="Button Component Accessibility should be keyboard accessible" time="0.001">
    </testcase>
    <testcase classname="Button Component Accessibility should have button role" name="Button Component Accessibility should have button role" time="0">
    </testcase>
  </testsuite>
  <testsuite name="EmailNotificationService" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.052" tests="16">
    <testcase classname="EmailNotificationService constructor should initialize with environment variables" name="EmailNotificationService constructor should initialize with environment variables" time="0.001">
    </testcase>
    <testcase classname="EmailNotificationService constructor should initialize with custom config" name="EmailNotificationService constructor should initialize with custom config" time="0">
    </testcase>
    <testcase classname="EmailNotificationService sendCalendarNotification should send appointment confirmation email successfully" name="EmailNotificationService sendCalendarNotification should send appointment confirmation email successfully" time="0.017">
    </testcase>
    <testcase classname="EmailNotificationService sendCalendarNotification should send appointment reminder email successfully" name="EmailNotificationService sendCalendarNotification should send appointment reminder email successfully" time="0.001">
    </testcase>
    <testcase classname="EmailNotificationService sendCalendarNotification should send appointment cancellation email successfully" name="EmailNotificationService sendCalendarNotification should send appointment cancellation email successfully" time="0">
    </testcase>
    <testcase classname="EmailNotificationService sendCalendarNotification should send appointment modification email successfully" name="EmailNotificationService sendCalendarNotification should send appointment modification email successfully" time="0.001">
    </testcase>
    <testcase classname="EmailNotificationService sendCalendarNotification should handle email sending failure" name="EmailNotificationService sendCalendarNotification should handle email sending failure" time="0.003">
    </testcase>
    <testcase classname="EmailNotificationService sendCalendarNotification should handle missing recipient email gracefully" name="EmailNotificationService sendCalendarNotification should handle missing recipient email gracefully" time="0.001">
    </testcase>
    <testcase classname="EmailNotificationService testConnection should verify SMTP connection successfully" name="EmailNotificationService testConnection should verify SMTP connection successfully" time="0">
    </testcase>
    <testcase classname="EmailNotificationService testConnection should handle connection verification failure" name="EmailNotificationService testConnection should handle connection verification failure" time="0">
    </testcase>
    <testcase classname="EmailNotificationService email templates should generate correct confirmation email template" name="EmailNotificationService email templates should generate correct confirmation email template" time="0.001">
    </testcase>
    <testcase classname="EmailNotificationService email templates should generate correct reminder email template" name="EmailNotificationService email templates should generate correct reminder email template" time="0">
    </testcase>
    <testcase classname="EmailNotificationService email templates should handle events without location" name="EmailNotificationService email templates should handle events without location" time="0.001">
    </testcase>
    <testcase classname="EmailNotificationService email templates should handle events without description" name="EmailNotificationService email templates should handle events without description" time="0">
    </testcase>
    <testcase classname="EmailNotificationService error handling should handle unknown errors gracefully" name="EmailNotificationService error handling should handle unknown errors gracefully" time="0">
    </testcase>
    <testcase classname="EmailNotificationService error handling should handle network timeouts" name="EmailNotificationService error handling should handle network timeouts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Email Notifications API" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.051" tests="11">
    <testcase classname="Email Notifications API POST /api/notifications/email should send calendar notification successfully" name="Email Notifications API POST /api/notifications/email should send calendar notification successfully" time="0.001">
    </testcase>
    <testcase classname="Email Notifications API POST /api/notifications/email should test email service connection successfully" name="Email Notifications API POST /api/notifications/email should test email service connection successfully" time="0.001">
    </testcase>
    <testcase classname="Email Notifications API POST /api/notifications/email should return 400 for missing notification data" name="Email Notifications API POST /api/notifications/email should return 400 for missing notification data" time="0">
    </testcase>
    <testcase classname="Email Notifications API POST /api/notifications/email should return 400 for invalid action" name="Email Notifications API POST /api/notifications/email should return 400 for invalid action" time="0">
    </testcase>
    <testcase classname="Email Notifications API POST /api/notifications/email should return 401 for unauthenticated user" name="Email Notifications API POST /api/notifications/email should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Email Notifications API POST /api/notifications/email should handle email sending failure" name="Email Notifications API POST /api/notifications/email should handle email sending failure" time="0">
    </testcase>
    <testcase classname="Email Notifications API POST /api/notifications/email should handle email service connection failure" name="Email Notifications API POST /api/notifications/email should handle email service connection failure" time="0">
    </testcase>
    <testcase classname="Email Notifications API GET /api/notifications/email should return email service status successfully" name="Email Notifications API GET /api/notifications/email should return email service status successfully" time="0">
    </testcase>
    <testcase classname="Email Notifications API GET /api/notifications/email should return email service configuration issue" name="Email Notifications API GET /api/notifications/email should return email service configuration issue" time="0">
    </testcase>
    <testcase classname="Email Notifications API GET /api/notifications/email should return 401 for unauthenticated user" name="Email Notifications API GET /api/notifications/email should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Email Notifications API GET /api/notifications/email should handle service errors gracefully" name="Email Notifications API GET /api/notifications/email should handle service errors gracefully" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Prescriptions API" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.029" tests="11">
    <testcase classname="Prescriptions API GET /api/health/prescriptions should return prescriptions for authenticated user" name="Prescriptions API GET /api/health/prescriptions should return prescriptions for authenticated user" time="0">
    </testcase>
    <testcase classname="Prescriptions API GET /api/health/prescriptions should return 401 for unauthenticated user" name="Prescriptions API GET /api/health/prescriptions should return 401 for unauthenticated user" time="0.001">
    </testcase>
    <testcase classname="Prescriptions API GET /api/health/prescriptions should handle database errors gracefully" name="Prescriptions API GET /api/health/prescriptions should handle database errors gracefully" time="0.002">
    </testcase>
    <testcase classname="Prescriptions API POST /api/health/prescriptions should create a new prescription" name="Prescriptions API POST /api/health/prescriptions should create a new prescription" time="0.001">
    </testcase>
    <testcase classname="Prescriptions API POST /api/health/prescriptions should return 400 for missing required fields" name="Prescriptions API POST /api/health/prescriptions should return 400 for missing required fields" time="0">
    </testcase>
    <testcase classname="Prescriptions API POST /api/health/prescriptions should return 401 for unauthenticated user" name="Prescriptions API POST /api/health/prescriptions should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Prescriptions API DELETE /api/health/prescriptions/[id] should delete a prescription" name="Prescriptions API DELETE /api/health/prescriptions/[id] should delete a prescription" time="0">
    </testcase>
    <testcase classname="Prescriptions API DELETE /api/health/prescriptions/[id] should return 404 if prescription not found" name="Prescriptions API DELETE /api/health/prescriptions/[id] should return 404 if prescription not found" time="0">
    </testcase>
    <testcase classname="Prescriptions API DELETE /api/health/prescriptions/[id] should return 401 for unauthenticated user" name="Prescriptions API DELETE /api/health/prescriptions/[id] should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Prescriptions API PUT /api/health/prescriptions/[id] should update a prescription" name="Prescriptions API PUT /api/health/prescriptions/[id] should update a prescription" time="0">
    </testcase>
    <testcase classname="Prescriptions API PUT /api/health/prescriptions/[id] should return 404 if prescription not found" name="Prescriptions API PUT /api/health/prescriptions/[id] should return 404 if prescription not found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Insurance Policies API" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.025" tests="5">
    <testcase classname="Insurance Policies API GET /api/insurance/policies should return policies for authenticated user" name="Insurance Policies API GET /api/insurance/policies should return policies for authenticated user" time="0">
    </testcase>
    <testcase classname="Insurance Policies API GET /api/insurance/policies should filter by policy type" name="Insurance Policies API GET /api/insurance/policies should filter by policy type" time="0">
    </testcase>
    <testcase classname="Insurance Policies API GET /api/insurance/policies should return 401 for unauthenticated user" name="Insurance Policies API GET /api/insurance/policies should return 401 for unauthenticated user" time="0.001">
    </testcase>
    <testcase classname="Insurance Policies API POST /api/insurance/policies should create a new policy" name="Insurance Policies API POST /api/insurance/policies should create a new policy" time="0">
    </testcase>
    <testcase classname="Insurance Policies API POST /api/insurance/policies should return 400 for missing required fields" name="Insurance Policies API POST /api/insurance/policies should return 400 for missing required fields" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Insurance Management Integration Tests" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.035" tests="7">
    <testcase classname="Insurance Management Integration Tests Policy Management Flow should add a policy and retrieve all policies" name="Insurance Management Integration Tests Policy Management Flow should add a policy and retrieve all policies" time="0.001">
    </testcase>
    <testcase classname="Insurance Management Integration Tests Policy Management Flow should filter policies by type" name="Insurance Management Integration Tests Policy Management Flow should filter policies by type" time="0">
    </testcase>
    <testcase classname="Insurance Management Integration Tests Multi-Policy Management should handle multiple policies of different types" name="Insurance Management Integration Tests Multi-Policy Management should handle multiple policies of different types" time="0.001">
    </testcase>
    <testcase classname="Insurance Management Integration Tests Policy Validation should reject policy without required fields" name="Insurance Management Integration Tests Policy Validation should reject policy without required fields" time="0">
    </testcase>
    <testcase classname="Insurance Management Integration Tests Policy Validation should accept policy with all required fields" name="Insurance Management Integration Tests Policy Validation should accept policy with all required fields" time="0">
    </testcase>
    <testcase classname="Insurance Management Integration Tests Error Handling should handle unauthorized access" name="Insurance Management Integration Tests Error Handling should handle unauthorized access" time="0">
    </testcase>
    <testcase classname="Insurance Management Integration Tests Error Handling should handle database errors gracefully" name="Insurance Management Integration Tests Error Handling should handle database errors gracefully" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Appointments API" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.028" tests="11">
    <testcase classname="Appointments API GET /api/health/appointments should return appointments for authenticated user" name="Appointments API GET /api/health/appointments should return appointments for authenticated user" time="0.001">
    </testcase>
    <testcase classname="Appointments API GET /api/health/appointments should return 401 for unauthenticated user" name="Appointments API GET /api/health/appointments should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Appointments API GET /api/health/appointments should handle database errors gracefully" name="Appointments API GET /api/health/appointments should handle database errors gracefully" time="0.003">
    </testcase>
    <testcase classname="Appointments API POST /api/health/appointments should create a new appointment" name="Appointments API POST /api/health/appointments should create a new appointment" time="0">
    </testcase>
    <testcase classname="Appointments API POST /api/health/appointments should return 400 for missing required fields" name="Appointments API POST /api/health/appointments should return 400 for missing required fields" time="0">
    </testcase>
    <testcase classname="Appointments API POST /api/health/appointments should return 401 for unauthenticated user" name="Appointments API POST /api/health/appointments should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Appointments API DELETE /api/health/appointments/[id] should delete an appointment" name="Appointments API DELETE /api/health/appointments/[id] should delete an appointment" time="0">
    </testcase>
    <testcase classname="Appointments API DELETE /api/health/appointments/[id] should return 404 if appointment not found" name="Appointments API DELETE /api/health/appointments/[id] should return 404 if appointment not found" time="0">
    </testcase>
    <testcase classname="Appointments API DELETE /api/health/appointments/[id] should return 401 for unauthenticated user" name="Appointments API DELETE /api/health/appointments/[id] should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Appointments API PUT /api/health/appointments/[id] should update an appointment" name="Appointments API PUT /api/health/appointments/[id] should update an appointment" time="0">
    </testcase>
    <testcase classname="Appointments API PUT /api/health/appointments/[id] should return 404 if appointment not found" name="Appointments API PUT /api/health/appointments/[id] should return 404 if appointment not found" time="0">
    </testcase>
  </testsuite>
  <testsuite name="NotificationService" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.031" tests="13">
    <testcase classname="NotificationService scheduleAppointmentReminders should schedule confirmation and reminder notifications" name="NotificationService scheduleAppointmentReminders should schedule confirmation and reminder notifications" time="0.002">
    </testcase>
    <testcase classname="NotificationService scheduleAppointmentReminders should handle email sending failure gracefully" name="NotificationService scheduleAppointmentReminders should handle email sending failure gracefully" time="0">
    </testcase>
    <testcase classname="NotificationService scheduleAppointmentReminders should not schedule reminders for past events" name="NotificationService scheduleAppointmentReminders should not schedule reminders for past events" time="0.001">
    </testcase>
    <testcase classname="NotificationService scheduleAppointmentReminders should handle events without attendees" name="NotificationService scheduleAppointmentReminders should handle events without attendees" time="0">
    </testcase>
    <testcase classname="NotificationService sendAppointmentConfirmation should send confirmation email successfully" name="NotificationService sendAppointmentConfirmation should send confirmation email successfully" time="0">
    </testcase>
    <testcase classname="NotificationService sendAppointmentConfirmation should handle email sending failure" name="NotificationService sendAppointmentConfirmation should handle email sending failure" time="0.001">
    </testcase>
    <testcase classname="NotificationService sendAppointmentReminder should send reminder email successfully" name="NotificationService sendAppointmentReminder should send reminder email successfully" time="0">
    </testcase>
    <testcase classname="NotificationService sendAppointmentCancellation should send cancellation email successfully" name="NotificationService sendAppointmentCancellation should send cancellation email successfully" time="0">
    </testcase>
    <testcase classname="NotificationService sendAppointmentModification should send modification email successfully" name="NotificationService sendAppointmentModification should send modification email successfully" time="0">
    </testcase>
    <testcase classname="NotificationService testEmailService should test email service connection successfully" name="NotificationService testEmailService should test email service connection successfully" time="0.001">
    </testcase>
    <testcase classname="NotificationService testEmailService should handle email service connection failure" name="NotificationService testEmailService should handle email service connection failure" time="0">
    </testcase>
    <testcase classname="NotificationService error handling should handle unknown errors gracefully" name="NotificationService error handling should handle unknown errors gracefully" time="0">
    </testcase>
    <testcase classname="NotificationService error handling should handle network timeouts" name="NotificationService error handling should handle network timeouts" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Test Email API" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.031" tests="10">
    <testcase classname="Test Email API POST /api/test-email should send test email successfully" name="Test Email API POST /api/test-email should send test email successfully" time="0.001">
    </testcase>
    <testcase classname="Test Email API POST /api/test-email should send test email with default test type" name="Test Email API POST /api/test-email should send test email with default test type" time="0">
    </testcase>
    <testcase classname="Test Email API POST /api/test-email should return 400 for missing recipient email" name="Test Email API POST /api/test-email should return 400 for missing recipient email" time="0">
    </testcase>
    <testcase classname="Test Email API POST /api/test-email should return 401 for unauthenticated user" name="Test Email API POST /api/test-email should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Test Email API POST /api/test-email should handle email sending failure" name="Test Email API POST /api/test-email should handle email sending failure" time="0">
    </testcase>
    <testcase classname="Test Email API POST /api/test-email should handle service errors gracefully" name="Test Email API POST /api/test-email should handle service errors gracefully" time="0.002">
    </testcase>
    <testcase classname="Test Email API GET /api/test-email should return email service status successfully" name="Test Email API GET /api/test-email should return email service status successfully" time="0">
    </testcase>
    <testcase classname="Test Email API GET /api/test-email should return email service configuration issue" name="Test Email API GET /api/test-email should return email service configuration issue" time="0.001">
    </testcase>
    <testcase classname="Test Email API GET /api/test-email should return 401 for unauthenticated user" name="Test Email API GET /api/test-email should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Test Email API GET /api/test-email should handle service errors gracefully" name="Test Email API GET /api/test-email should handle service errors gracefully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Insurance Policy Data Validation" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.025" tests="21">
    <testcase classname="Insurance Policy Data Validation Required Fields Validation should have all required fields" name="Insurance Policy Data Validation Required Fields Validation should have all required fields" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Required Fields Validation should validate userId is a non-empty string" name="Insurance Policy Data Validation Required Fields Validation should validate userId is a non-empty string" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Required Fields Validation should validate policyNumber is unique and formatted" name="Insurance Policy Data Validation Required Fields Validation should validate policyNumber is unique and formatted" time="0.001">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Policy Type Validation should accept valid policy types" name="Insurance Policy Data Validation Policy Type Validation should accept valid policy types" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Policy Type Validation should validate policyType is uppercase" name="Insurance Policy Data Validation Policy Type Validation should validate policyType is uppercase" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Financial Field Validation should validate coverageAmount is a positive number" name="Insurance Policy Data Validation Financial Field Validation should validate coverageAmount is a positive number" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Financial Field Validation should validate deductible is a non-negative number" name="Insurance Policy Data Validation Financial Field Validation should validate deductible is a non-negative number" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Financial Field Validation should validate premiumAmount is a positive number" name="Insurance Policy Data Validation Financial Field Validation should validate premiumAmount is a positive number" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Financial Field Validation should validate deductible is less than coverageAmount" name="Insurance Policy Data Validation Financial Field Validation should validate deductible is less than coverageAmount" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Premium Frequency Validation should accept valid premium frequencies" name="Insurance Policy Data Validation Premium Frequency Validation should accept valid premium frequencies" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Premium Frequency Validation should validate premium frequency is uppercase" name="Insurance Policy Data Validation Premium Frequency Validation should validate premium frequency is uppercase" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Date Validation should have valid effectiveDate" name="Insurance Policy Data Validation Date Validation should have valid effectiveDate" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Date Validation should have valid expirationDate" name="Insurance Policy Data Validation Date Validation should have valid expirationDate" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Date Validation should validate expirationDate is after effectiveDate" name="Insurance Policy Data Validation Date Validation should validate expirationDate is after effectiveDate" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Date Validation should calculate policy duration" name="Insurance Policy Data Validation Date Validation should calculate policy duration" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Status Validation should have valid status" name="Insurance Policy Data Validation Status Validation should have valid status" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Status Validation should default to ACTIVE status" name="Insurance Policy Data Validation Status Validation should default to ACTIVE status" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Optional Fields should allow optional agent information" name="Insurance Policy Data Validation Optional Fields should allow optional agent information" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Optional Fields should allow optional beneficiaries array" name="Insurance Policy Data Validation Optional Fields should allow optional beneficiaries array" time="0">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Business Logic should calculate annual premium from monthly premium" name="Insurance Policy Data Validation Business Logic should calculate annual premium from monthly premium" time="0.001">
    </testcase>
    <testcase classname="Insurance Policy Data Validation Business Logic should validate policy is currently active" name="Insurance Policy Data Validation Business Logic should validate policy is currently active" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Tax Returns API" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.026" tests="6">
    <testcase classname="Tax Returns API GET /api/tax/returns should return tax returns for authenticated user" name="Tax Returns API GET /api/tax/returns should return tax returns for authenticated user" time="0.001">
    </testcase>
    <testcase classname="Tax Returns API GET /api/tax/returns should filter by tax year" name="Tax Returns API GET /api/tax/returns should filter by tax year" time="0">
    </testcase>
    <testcase classname="Tax Returns API GET /api/tax/returns should return 401 for unauthenticated user" name="Tax Returns API GET /api/tax/returns should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Tax Returns API POST /api/tax/returns should create a new tax return" name="Tax Returns API POST /api/tax/returns should create a new tax return" time="0">
    </testcase>
    <testcase classname="Tax Returns API POST /api/tax/returns should return 400 for missing required fields" name="Tax Returns API POST /api/tax/returns should return 400 for missing required fields" time="0.001">
    </testcase>
    <testcase classname="Tax Returns API POST /api/tax/returns should calculate tax correctly" name="Tax Returns API POST /api/tax/returns should calculate tax correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Legal Cases API" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.024" tests="4">
    <testcase classname="Legal Cases API GET /api/legal/cases should return legal cases for authenticated user" name="Legal Cases API GET /api/legal/cases should return legal cases for authenticated user" time="0.001">
    </testcase>
    <testcase classname="Legal Cases API GET /api/legal/cases should return 401 for unauthenticated user" name="Legal Cases API GET /api/legal/cases should return 401 for unauthenticated user" time="0">
    </testcase>
    <testcase classname="Legal Cases API POST /api/legal/cases should create a new legal case" name="Legal Cases API POST /api/legal/cases should create a new legal case" time="0">
    </testcase>
    <testcase classname="Legal Cases API POST /api/legal/cases should return 400 for missing required fields" name="Legal Cases API POST /api/legal/cases should return 400 for missing required fields" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Prescription Data Validation" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.024" tests="15">
    <testcase classname="Prescription Data Validation Required Fields Validation should have all required fields" name="Prescription Data Validation Required Fields Validation should have all required fields" time="0.001">
    </testcase>
    <testcase classname="Prescription Data Validation Required Fields Validation should validate userId is a non-empty string" name="Prescription Data Validation Required Fields Validation should validate userId is a non-empty string" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Required Fields Validation should validate medicationName is a non-empty string" name="Prescription Data Validation Required Fields Validation should validate medicationName is a non-empty string" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Required Fields Validation should validate dosage is a non-empty string" name="Prescription Data Validation Required Fields Validation should validate dosage is a non-empty string" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Required Fields Validation should validate frequency is a non-empty string" name="Prescription Data Validation Required Fields Validation should validate frequency is a non-empty string" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Data Types should have correct data types for all fields" name="Prescription Data Validation Data Types should have correct data types for all fields" time="0.001">
    </testcase>
    <testcase classname="Prescription Data Validation Data Types should validate refillsRemaining is a non-negative number" name="Prescription Data Validation Data Types should validate refillsRemaining is a non-negative number" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Data Types should validate isActive is a boolean" name="Prescription Data Validation Data Types should validate isActive is a boolean" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Business Logic Validation should validate dosage format" name="Prescription Data Validation Business Logic Validation should validate dosage format" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Business Logic Validation should validate frequency is descriptive" name="Prescription Data Validation Business Logic Validation should validate frequency is descriptive" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Business Logic Validation should validate startDate is a valid date" name="Prescription Data Validation Business Logic Validation should validate startDate is a valid date" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Optional Fields should allow optional endDate" name="Prescription Data Validation Optional Fields should allow optional endDate" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Optional Fields should allow optional notes" name="Prescription Data Validation Optional Fields should allow optional notes" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Data Integrity should maintain data integrity when copying" name="Prescription Data Validation Data Integrity should maintain data integrity when copying" time="0">
    </testcase>
    <testcase classname="Prescription Data Validation Data Integrity should handle date serialization" name="Prescription Data Validation Data Integrity should handle date serialization" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Investment Management Integration Tests" errors="0" failures="0" skipped="0" timestamp="2025-10-23T23:12:37" time="0.023" tests="5">
    <testcase classname="Investment Management Integration Tests Portfolio Creation Flow should create a portfolio successfully" name="Investment Management Integration Tests Portfolio Creation Flow should create a portfolio successfully" time="0.001">
    </testcase>
    <testcase classname="Investment Management Integration Tests Portfolio Creation Flow should enforce authentication for portfolio operations" name="Investment Management Integration Tests Portfolio Creation Flow should enforce authentication for portfolio operations" time="0">
    </testcase>
    <testcase classname="Investment Management Integration Tests Holdings Management should validate holding data structure" name="Investment Management Integration Tests Holdings Management should validate holding data structure" time="0">
    </testcase>
    <testcase classname="Investment Management Integration Tests Holdings Management should calculate portfolio value correctly" name="Investment Management Integration Tests Holdings Management should calculate portfolio value correctly" time="0">
    </testcase>
    <testcase classname="Investment Management Integration Tests Performance Tracking should calculate gain/loss correctly" name="Investment Management Integration Tests Performance Tracking should calculate gain/loss correctly" time="0">
    </testcase>
  </testsuite>
</testsuites>